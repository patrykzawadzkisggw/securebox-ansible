---
# tasks file for roles/postgres
- name: Upewnij się, że zależności Ansible są zainstalowane
  ansible.builtin.apt:
    name:
      - python3-pip
      - python3-venv
      - acl
      - curl
    state: present
    update_cache: yes

- name: Zainstaluj bibliotekę psycopg2 dla modułów PostgreSQL w Ansible
  ansible.builtin.pip:
    name: psycopg2-binary
    state: present

- name: Zainstaluj PostgreSQL i wymagane pakiety
  ansible.builtin.apt:
    name:
      - "postgresql-{{ postgresql_version }}"
      - postgresql-contrib
      - libpq-dev
      - python3-psycopg2
    state: present

- name: Upewnij się, że usługa PostgreSQL jest uruchomiona i włączona przy starcie
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: yes

- name: Upewnij się, że katalog remote_tmp Ansible istnieje dla użytkownika postgres
  ansible.builtin.file:
    path: /var/lib/postgresql/.ansible/tmp
    state: directory
    owner: postgres
    group: postgres
    mode: "0700"

- name: Utwórz bazę danych PostgreSQL
  become_user: "{{ postgresql_user }}"
  community.postgresql.postgresql_db:
    name: "{{ db_name }}"
    encoding: UTF-8
    lc_collate: C
    lc_ctype: C
    template: template0
    state: present
  environment:
    PGOPTIONS: "-c password_encryption=scram-sha-256"


- name: Utwórz użytkownika administracyjnego PostgreSQL
  become_user: "{{ postgresql_user }}"
  community.postgresql.postgresql_user:
    name: "{{ admin_user }}"
    password: "{{ admin_password }}"
    role_attr_flags: SUPERUSER,CREATEDB,CREATEROLE,LOGIN
    state: present
  environment:
    PGOPTIONS: "-c password_encryption=scram-sha-256"

- name: Przyznaj wszystkie uprawnienia do schematu użytkownikowi admin
  become_user: "{{ postgresql_user }}"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    roles: "{{ admin_user }}"
    type: schema
    objs: public
    privs: ALL
    state: present

- name: Utwórz użytkownika PostgreSQL z bezpiecznym hasłem
  become_user: "{{ postgresql_user }}"
  community.postgresql.postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB,NOCREATEROLE
    state: present
  environment:
    PGOPTIONS: "-c password_encryption=scram-sha-256"


- name: Przyznaj uprawnienie CONNECT użytkownikowi
  become_user: "{{ postgresql_user }}"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    roles: "{{ db_user }}"
    privs: CONNECT
    type: database
    state: present

- name: Cofnij zbędne uprawnienia ze schematu publicznego
  become_user: "{{ postgresql_user }}"
  community.postgresql.postgresql_privs:
    db: "{{ db_name }}"
    roles: PUBLIC
    privs: ALL
    type: schema
    objs: public
    state: absent

- name: Ustaw domyślne uprawnienia dla myappuser do przyszłych tabel w schemacie publicznym
  become_user: "{{ postgresql_user }}"
  community.postgresql.postgresql_query:
    db: "{{ db_name }}"
    query: >
      ALTER DEFAULT PRIVILEGES IN SCHEMA public
      GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO "{{ db_user }}";


- name: Skonfiguruj PostgreSQL do nasłuchu tylko na localhost
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: '^#?listen_addresses\s*='
    line: "listen_addresses = {{ postgresql_listen_addresses }}"
  notify: Restart PostgreSQL

- name: Ustaw max_connections
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: '^#?max_connections\s*='
    line: "max_connections = {{ postgresql_max_connections }}"
  notify: Restart PostgreSQL

- name: Włącz szyfrowanie haseł SCRAM-SHA-256
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: '^#?password_encryption\s*='
    line: "password_encryption = {{ postgresql_password_encryption }}"
  notify: Restart PostgreSQL

- name: Skonfiguruj pg_hba.conf dla dostępu lokalnego
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "0640"
  notify: Restart PostgreSQL

- name: Utwardź uprawnienia katalogu PostgreSQL
  ansible.builtin.file:
    path: "/etc/postgresql/{{ postgresql_version }}/main"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "0700"
    recurse: yes

- name: Wyłącz logowanie roota przez sudo dla PostgreSQL
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/postgresql
    line: "ALL ALL=(postgres) NOPASSWD: ALL"
    state: absent
    validate: "visudo -cf %s"

- name: Zainstaluj fail2ban w celu ochrony przed atakami brute-force
  ansible.builtin.apt:
    name: fail2ban
    state: present

- name: Skonfiguruj fail2ban dla PostgreSQL
  ansible.builtin.template:
    src: fail2ban.j2
    dest: /etc/fail2ban/jail.d/postgresql.conf
    mode: "0644"
  notify: Restart fail2ban

- name: Utwórz filtr fail2ban dla PostgreSQL
  ansible.builtin.template:
    src: filtr.j2
    dest: /etc/fail2ban/filter.d/postgresql.conf
    mode: "0644"
  notify: Restart fail2ban

- name: Upewnij się, że katalog logów PostgreSQL jest bezpieczny
  ansible.builtin.file:
    path: /var/log/postgresql
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "0700"